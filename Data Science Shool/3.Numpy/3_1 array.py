import numpy as np

ar = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
# type(ar) -> numpy.ndarray

# 벡터화 연산
data = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
ans = []
for i in data:  # 반복문을 이용한 구현
    ans.append(2*i)

x = np.array(data)
print(2*x)  # -> [ 0  2  4  6  8 10 12 14 16 18], 벡터화 연산 지원, 속도 빠름
"""
L = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
print(2 * L)
-> [0,2,4,6,8,10,...,18], 일반 리스트에 *2를 하면 길이가 두배로 늘어남, 속도도 느림
"""
a = np.array([1, 2, 3])
b = np.array([10, 20, 30])
print(2*a+b)  # -> [12,24,36], 벡터화 연산은 비교 연산과 논리 연산을 포함한 모든 종류의 수학 연산에 적용
print(a == 2)  # ->[False, True, False]
print(b > 10)  # -> [False, True, True]
print((a == 2) & (b > 10))  # -> [False, True, False]

# n차원 배열 만들기
c = np.array([[0, 1, 2], [3, 4, 5]])  # 2*3 배열
len(c)  # -> 2(행의 갯수)
len(c[0])  # -> 3 (열의 갯수)

d = np.array([[[1, 2, 3, 4],
               [5, 6, 7, 8],
               [9, 10, 11, 12]],
              [[11, 12, 13, 14],
               [15, 16, 17, 18],
               [19, 20, 21, 22]]])   # 2 x 3 x 4 배열
len(d), len(d[0]), len(d[0][0])  # 2(깊이),3(행),4(열)

# 배열의 차원과 길이 알아내기
print(a.ndim)  # 1(배열의 차원) 출력
print(a.shape)  # (3,) -> 배열의 크기 출력

"""
print(c.ndim) # 2
print(c.shape) # (2,3)

print(d.ndim) # 3
print(d.shape) # (2,3,4)
"""
# 배열 인덱싱
a = np.array([[0, 1, 2], [3, 4, 5]])

a[0, 0]  # 0(1행 1열) -> 다차원 배열일 때 콤마를 사용하여 접근할 수 있다. 콤마로 구분된 차원을 축(axis)이라고도 한다.
a[-1, -1]  # 5(마지막 행 마지막 열)

# 배열 슬라이싱
# 배열 객체로 구현한 다차원 배열의 원소 중 복수 개를 접근하려면 일반적인 파이썬 슬라이싱과 콤마를 함께 사용하면 된다.
a = np.array([[0, 1, 2, 3], [4, 5, 6, 7]])
a[0, :]  # -> array([0, 1, 2, 3]) 1행 전체
a[:, 1]  # -> array([1, 5]) 두번째 열 전체
a[1, 1:]  # -> array([5, 6, 7]) 두번째 행의 두번째 열부터 끝열까지
a[:2, :2]  # -> array([[0, 1],[4, 5]])

# 배열 인덱싱
# 인덱싱이라는 이름이지만 쿼리의 역할 수행
a = a = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
idx = np.array([True, False, True, False, True,
               False, True, False, True, False])
a[idx]  # -> array([0, 2, 4, 6, 8])
a % 2  # -> array([0, 1, 0, 1, 0, 1, 0, 1, 0, 1], dtype=int32) 조건문 연산 사용
a[a % 2 == 0]  # -> array([0, 2, 4, 6, 8])


"""
연습 문제 3

다음 행렬과 같은 배열이 있다.

x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
             11, 12, 13, 14, 15, 16, 17, 18, 19, 20])
이 배열에서 3의 배수를 찾아라.
p = (x%3 == 0)
print(x[p])
이 배열에서 4로 나누면 1이 남는 수를 찾아라.
q = (x%4 == 1)
print(x[p])
이 배열에서 3으로 나누면 나누어지고 4로 나누면 1이 남는 수를 찾아라.
print(x[p & q]) p and q로 할 경우 오류 발생함
"""
